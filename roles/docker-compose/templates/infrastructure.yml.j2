services:
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    network_mode: host
    environment:
      TZ: '{{ infrastructure.time_zone }}'
      WEBPASSWORD: 'root'
      WEB_PORT: '8082'
      INTERFACE: 'ens18'
      DHCP_ACTIVE: 'true'
      DHCP_START: '{{ dhcp_range_start }}'
      DHCP_END: '{{ dhcp_range_end }}'
      DHCP_ROUTER: '{{ dhcp_router }}'
      DHCP_LEASETIME: '{{ dhcp_lease_time }}'
      PIHOLE_DOMAIN: '{{ dhcp_dns_server }}'
      DHCP_IPv6: 'false'
    # Volumes store your data between container upgrades
    volumes:
      - '{{ docker_config_path }}/pihole/etc-pihole:/etc/pihole'
      - '{{ docker_config_path }}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
      #- '{{ docker_config_path }}/pihole/lighttpd.conf:/etc/lighttpd/lighttpd.conf'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed    
    restart: unless-stopped

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    environment:
      GID: "{{ user_gid.stdout }}"
      COLLECTIONS: "crowdsecurity/linux crowdsecurity/traefik"
    volumes:
      - "{{ docker_config_path }}/crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml"
      - "{{ docker_config_path }}/crowdsec/db:/var/lib/crowdsec/data/"
      - "{{ docker_config_path }}/crowdsec/config:/etc/crowdsec/"
      - "{{ docker_config_path }}/traefik/logs:/var/log/traefik/:ro"
    networks:
      - proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
  
  bouncer-traefik:
    image: docker.io/fbonalair/traefik-crowdsec-bouncer:latest
    container_name: bouncer-traefik
    environment:
      CROWDSEC_BOUNCER_API_KEY: "2IBZwXYlAOasnqq64o7OxOrLJ59DA/QzO+/e6orLKH0"
      CROWDSEC_AGENT_HOST: crowdsec:8080
    networks:
      - proxy
    depends_on:
      - crowdsec
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    container_name: traefik
    security_opt:
      - no-new-privileges:true
    command:
      - "--providers.file.filename=/traefik.yml"
      - "--log.level=DEBUG"
    networks:
      - proxy
    ports:
      - "80:80"
      - "81:81" # external http
      - "443:443"
      - "444:444" # external https
    environment:
      #CF_DNS_API_TOKEN_FILE: /run/secrets/duckdns_api_token # note using _FILE for docker secrets
      DUCKDNS_TOKEN: ${DUCKDNS_TOKEN} # if using .env
      TRAEFIK_DASHBOARD_CREDENTIALS: ${TRAEFIK_DASHBOARD_CREDENTIALS}
    env_file: .env # use .env
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "{{ docker_socket }}:/var/run/docker.sock:ro"
      - "{{ docker_config_path }}/traefik/data/traefik.yml:/traefik.yml:ro"
      - "{{ docker_config_path }}/traefik/data/acme.json:/acme.json"
      - "{{ docker_config_path }}/traefik/data/config.yml:/config.yml:ro"
      - "{{ docker_config_path }}/traefik/logs:/var/log/traefik"
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.traefik.entrypoints=http"
    - "traefik.http.routers.traefik.rule=Host(`traefik-dashboard.local.{{ infrastructure.sub_domain }}`)"
    - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_CREDENTIALS}"
    - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
    - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
    - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
    - "traefik.http.routers.traefik-secure.entrypoints=https"
    - "traefik.http.routers.traefik-secure.rule=Host(`traefik-dashboard.local.{{ infrastructure.sub_domain }}`)"
    - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
    - "traefik.http.routers.traefik-secure.tls=true"
    - "traefik.http.routers.traefik-secure.tls.certresolver=duckdns"
    - "traefik.http.routers.traefik-secure.tls.domains[0].main={{ infrastructure.sub_domain }}"
    - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.{{ infrastructure.sub_domain }}"
    - "traefik.http.routers.traefik-secure.service=api@internal"
    #- "traefik.http.routers.traefik.tls.certresolver=duckdns"

  gotify:
    image: gotify/server
    container_name: gotify
    volumes:
      - "{{ docker_config_path }}/gotify:/app/data"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    environment:
      - TZ={{ infrastructure.time_zone }}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.gotify.entrypoints=http"
      - "traefik.http.routers.gotify.rule=Host(`gotify.local.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.middlewares.gotify-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.gotify.middlewares=gotify-https-redirect"
      - "traefik.http.routers.gotify-secure.entrypoints=https"
      - "traefik.http.routers.gotify-secure.rule=Host(`gotify.local.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.routers.gotify-secure.tls=true"
      - "traefik.http.routers.gotify-secure.service=gotify"
      - "traefik.http.services.gotify.loadbalancer.server.port=80"


  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - LOG_LEVEL=info
      - PUID=1000
      - PGID=1000
      #- HOMEPAGE_VAR_PROXMOX_USERNAME=$HOMEPAGE_VAR_PROXMOX_USERNAME
      #- HOMEPAGE_VAR_PROXMOX_PASSWORD=$HOMEPAGE_VAR_PROXMOX_PASSWORD
      #- HOMEPAGE_VAR_PORTAINER_TOKEN=$HOMEPAGE_VAR_PORTAINER_TOKEN
    volumes:
      - "{{ docker_config_path }}/homepage/config:/app/config"
      #- ./homepage/images:/app/public/images  # for custom background images
      #- ./homepage/icons:/app/public/icons  # for custom icons      
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homepage.entrypoints=http"
      - "traefik.http.routers.homepage.rule=Host(`homepage.local.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.middlewares.homepage-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.homepage.middlewares=homepage-https-redirect"
      - "traefik.http.routers.homepage-secure.entrypoints=https"
      - "traefik.http.routers.homepage-secure.rule=Host(`homepage.local.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.routers.homepage-secure.tls=true"
      - "traefik.http.routers.homepage-secure.service=homepage"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"
      - "traefik.http.routers.homepage-secure.tls.certresolver=duckdns"
      #- "traefik.http.routers.homepage.tls.domains[0].main=local-skynet.duckdns.org"
      #- "traefik.http.routers.homepage.tls.domains[0].sans=*.local-skynet.duckdns.org"
    restart: unless-stopped
    networks:
      - proxy



  webserver:
    container_name: webserver
    image: nginx:latest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.entrypoints=http-external"
      - "traefik.http.routers.nginx.rule=Host(`nginx.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.middlewares.nginx-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.nginx.middlewares=nginx-https-redirect"
      - "traefik.http.routers.nginx-secure.entrypoints=https-external"
      - "traefik.http.routers.nginx-secure.rule=Host(`nginx.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.routers.nginx-secure.tls=true"
      - "traefik.http.routers.nginx-secure.service=nginx"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
      - "traefik.http.routers.nginx-secure.tls.certresolver=duckdns"
    volumes:
      - "{{ docker_config_path }}/nginx/html:/usr/share/nginx/html"
    restart: unless-stopped
    networks:
      - proxy
    

  wireguard:
    image: linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID="{{ user_uid.stdout }}"
      - PGID="{{ user_gid.stdout }}"
      - TZ="{{ infrastructure.time_zone }}"
      - SERVERURL={{ infrastructure.sub_domain }} #optional
      - SERVERPORT=51820 #optional
      - PEERS={{ infrastructure.wireguard_peerNr }} #optional
      - PEERDNS=1.1.1.1 #dns which the client then uses
      - INTERNAL_SUBNET=10.13.13.0 #internal subnet the clients will use
      - PERSISTENTKEEPALIVE_PEERS=all #optional
    volumes:
      - ./wireguard_server/config:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
    - net.ipv4.conf.all.src_valid_mark=1
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    volumes:
      - "{{ docker_socket }}:/var/run/docker.sock"
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=http"
      - "traefik.http.routers.portainer.rule=Host(`portainer.local.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.middlewares.portainer-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.portainer.middlewares=portainer-https-redirect"
      - "traefik.http.routers.portainer-secure.entrypoints=https"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.local.{{ infrastructure.sub_domain }}`)"
      - "traefik.http.routers.portainer-secure.tls=true"
      - "traefik.http.routers.portainer-secure.service=portainer"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      - "traefik.http.routers.portainer-secure.tls.certresolver=duckdns"
    restart: unless-stopped
    networks:
      - "proxy"
  
  duckdns:
    container_name: duckdns
    image: linuxserver/duckdns:latest
    environment:
      - TOKEN={{ infrastructure.duck_dns_token }}
      - SUBDOMAINS={{ infrastructure.sub_domain }}
      - TZ={{ infrastructure.time_zone }}
    restart: always

  # (Optional) For secure docker socket integration for dashboard
  dockerproxy:
    image: ghcr.io/tecnativa/docker-socket-proxy:latest
    container_name: dockerproxy
    environment:
      - CONTAINERS=1 # Allow access to viewing containers
      - SERVICES=1 # Allow access to viewing services (necessary when using Docker Swarm)
      - TASKS=1 # Allow access to viewing tasks (necessary when using Docker Swarm)
      - POST=0 # Disallow any POST operations (effectively read-only)
    ports:
      - 127.0.0.1:2375:2375
    volumes:
      - "{{ docker_socket }}:/var/run/docker.sock:ro" # Mounted as read-only
    restart: unless-stopped  


secrets:
  duckdns_api_token:
    file: ../traefik/duckdns_api_token.txt

networks:
  proxy:
    name: proxy
  default:
    driver: bridge

volumes:
  portainer_data: